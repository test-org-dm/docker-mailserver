name: CI-WIP

on:
  pull_request:
    branches:
      - '*'
  push:
    branches:
      - '*'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Prep path
        run: |
          mkdir ~/bin
          echo ~/bin >> $GITHUB_PATH
      - name: HADOLINT
        run: |
          curl -L https://github.com/hadolint/hadolint/releases/download/v${HADOLINT_VERSION}/hadolint-$(uname -s)-$(uname -m) -o ~/bin/hadolint
          chmod +rx ~/bin/hadolint
          make hadolint
        env:
          HADOLINT_VERSION: 1.18.0
      - name: SHELLCHECK
        run: |
          wget -qO- "https://github.com/koalaman/shellcheck/releases/download/v${SHELLCHECK_VERSION}/shellcheck-v${SHELLCHECK_VERSION}.linux.x86_64.tar.xz" | tar -xJ
          mv "shellcheck-v${SHELLCHECK_VERSION}/shellcheck" ~/bin
          make shellcheck
        env:
          SHELLCHECK_VERSION: 0.7.1
      - name: ECLINT
        run: |
          sudo wget -qO- "https://github.com/editorconfig-checker/editorconfig-checker/releases/download/${ECLINT_VERSION}/ec-linux-amd64.tar.gz" | tar -xaz
          sudo mv bin/ec-linux-amd64 ~/bin/eclint
          sudo chmod +x ~/bin/eclint
          make eclint
        env:
          ECLINT_VERSION: 2.1.0
  build_docker:
    needs:
      - lint
    runs-on: ubuntu-latest
    outputs:
      imagetag: ${{ steps.prep.outputs.imagetag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=afaerber0815/test-dm
          VERSION=edge
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          fi
          if [ "${{ github.event_name }}" = "schedule" ]; then
            VERSION=nightly
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          SINGLE_TAG=${TAGS}
          if [[ $VERSION =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
            TAGS="$TAGS,${DOCKER_IMAGE}:latest"
          fi
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=imagetag::${SINGLE_TAG}
      # - name: Set up QEMU
      #   uses: docker/setup-qemu-action@v1
      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1
      #   id: buildx
      # # - name: Cache Docker layers
      # #   uses: actions/cache@v2
      # #   with:
      # #     path: /tmp/.buildx-cache
      # #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      # #     restore-keys: |
      # #       ${{ runner.os }}-buildx-
      # - name: Login to DockerHub
      #   uses: docker/login-action@v1
      #   with:
      #     username: ${{ secrets.DOCKER_USERNAME }}
      #     password: ${{ secrets.DOCKER_PASSWORD }}
      # - name: Build image locally
      #   uses: docker/build-push-action@v2
      #   with:
      #     builder: ${{ steps.buildx.outputs.name }}
      #     context: .
      #     file: ./Dockerfile
      #     build-args: |
      #       VCS_REF=${{ github.sha }}
      #       VCS_VERSION=${{ github.ref }}
      #     # platforms: linux/386,linux/amd64,linux/arm/v6,linux/arm/v7,linux/arm64,linux/ppc64le,linux/s390x
      #     platforms: linux/amd64,linux/arm64 # while developing to save time
      #     pull: true
      #     push: true
      #     tags: ${{ steps.prep.outputs.tags }}
      #     # cache-from: type=local,src=/tmp/.buildx-cache
      #     # cache-to: type=local,dest=/tmp/.buildx-cache
  test:
    needs: build_docker
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          submodules: recursive
      - name: run test suite
        run: |
          bash -c 'make generate-accounts tests'
        env:
          # CI: true
          NAME: ${{ needs.build_docker.outputs.imagetag }}
